
name: release

on:
  release:
    types: [published]
    
jobs:
  build-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet: [
          { framework: netstandard2.1, conditionframework: netcoreapp3.1, version: 3.1.x },
          { framework: net5.0, conditionframework: net5.0, version: 5.0.x },
          { framework: net6.0, conditionframework: net6.0, version: 6.0.x },
        ]

    name: ${{ matrix.dotnet.framework }} – run tests

    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet.version }}

      - name: Run build
        run: |
          dotnet build --configuration Release --framework ${{ matrix.dotnet.framework }} ./src/Specification/Specification.csproj /p:Framework=${{ matrix.dotnet.conditionframework }}

      - name: Run UnitTests
        run: |    
          dotnet test --configuration Release --framework ${{ matrix.dotnet.conditionframework }} ./tests/Specification.Tests/Specification.Tests.csproj /p:Framework=${{ matrix.dotnet.conditionframework }}

      - name: Run IntegrationTests
        run: |    
          dotnet test --configuration Release --framework ${{ matrix.dotnet.conditionframework }} ./tests/Specification.IntegrationTests/Specification.IntegrationTests.csproj /p:Framework=${{ matrix.dotnet.conditionframework }}
  
  build-and-publish:
    needs: build-tests

    runs-on: ubuntu-latest

    name: Build and publish library to NuGet
      
    steps:
      - uses: actions/checkout@v2

      - name: Extract version
        id: extract-version
        run: |
          version=$(cat ./src/Specification/Specification.csproj | grep "<VersionPrefix>" | sed -e "s/ *<\/*VersionPrefix>//g")
          echo "Package version: $version"
          if [ -z "${version// }" ]; then exit 1; fi
          echo "::set-output name=package_version::$version"
      - name: Extract package suffix from tag
        id: extract-version-suffix
        run: |
          ref=${{ github.ref }}
          prerelease=${{ github.event.release.prerelease }}
          version=${{ steps.extract-version.outputs.package_version }}
          shopt -s extglob
          suffix=${ref##*/v"${version}"?(-)}
          echo "Version suffix: $suffix"
          if [ -z "${suffix// }" ] && [ $prerelease == "true" ]; then exit 1; fi
          echo "::set-output name=version_suffix::$suffix"
          
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build and publish library to NuGet
        run: |
          dotnet build --configuration Release ./src/Specification/Specification.csproj
          dotnet pack --no-restore --no-build --configuration Release --version-suffix "${{ steps.extract-version-suffix.outputs.version_suffix }}" --output out/ ./src/Specification/Specification.csproj
          dotnet nuget push out/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
          
      - uses: actions/upload-artifact@v2
        with:
          name: NuGet package
          path: out/


  upload-release-assets:
    needs: build-and-publish

    runs-on: ubuntu-latest

    name: Upload release assets

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: NuGet package
          path: out

      - name: Get package
        id: get-package
        run: |
          echo "::set-output name=package::$(ls out/ | grep '\.nupkg')"
          echo "::set-output name=symbols::$(ls out/ | grep '\.snupkg')"
      - name: Upload package asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./out/${{ steps.get-package.outputs.package }}
          asset_name: ${{ steps.get-package.outputs.package }}
          asset_content_type: application/zip

      - name: Upload symbols asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./out/${{ steps.get-package.outputs.symbols }}
          asset_name: ${{ steps.get-package.outputs.symbols }}
          asset_content_type: application/zip
      
